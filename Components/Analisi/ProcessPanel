import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Slider } from "@/components/ui/slider";
import { Button } from "@/components/ui/button";
import { Settings, CheckCircle, Download } from "lucide-react";
import { motion } from "framer-motion";

export default function ProcessPanel({ 
  processSteps, 
  processData, 
  onUpdateData, 
  onValidate, 
  onDownload,
  isValidating,
  isDownloading 
}) {
  const renderParameterInput = (param, value, stepIndex, paramKey) => {
    const safeValue = value !== undefined && value !== null ? value : (param.min || "");
    
    switch (param.type) {
      case "number":
        return (
          <Input
            type="number"
            value={safeValue}
            onChange={(e) => onUpdateData(stepIndex, paramKey, parseFloat(e.target.value) || 0)}
            min={param.min}
            max={param.max}
            step={param.step || 0.01}
            className="mt-1"
          />
        );
      case "slider":
        const sliderValue = typeof safeValue === 'number' ? safeValue : (param.min || 0);
        return (
          <div className="mt-2">
            <Slider
              value={[sliderValue]}
              onValueChange={(values) => onUpdateData(stepIndex, paramKey, values[0])}
              min={param.min || 0}
              max={param.max || 100}
              step={param.step || 1}
              className="w-full"
            />
            <div className="flex justify-between text-xs text-slate-500 mt-1">
              <span>{param.min || 0}</span>
              <span className="font-medium">{sliderValue}</span>
              <span>{param.max || 100}</span>
            </div>
          </div>
        );
      case "select":
        return (
          <Select 
            value={String(safeValue || "")} 
            onValueChange={(newValue) => onUpdateData(stepIndex, paramKey, newValue)}
          >
            <SelectTrigger className="mt-1">
              <SelectValue placeholder="Seleziona..." />
            </SelectTrigger>
            <SelectContent>
              {param.options?.map((option) => (
                <SelectItem key={option} value={String(option)}>
                  {String(option)}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        );
      default:
        return (
          <Input
            value={String(safeValue)}
            onChange={(e) => onUpdateData(stepIndex, paramKey, e.target.value)}
            className="mt-1"
          />
        );
    }
  };

  return (
    <Card className="glass-card elegant-shadow h-fit sticky top-6">
      <CardHeader className="pb-4">
        <CardTitle className="flex items-center gap-2 text-slate-900">
          <Settings className="w-5 h-5 text-blue-600" />
          Processo di Elaborazione
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        {processSteps?.map((step, stepIndex) => (
          <motion.div
            key={stepIndex}
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: stepIndex * 0.1 }}
            className="border border-slate-200 rounded-xl p-4 bg-slate-50/50"
          >
            <h4 className="font-semibold text-slate-900 mb-3 text-sm">
              {stepIndex + 1}. {step.step_name}
            </h4>
            
            <div className="space-y-3">
              {Object.entries(step.parameters || {}).map(([paramKey, param]) => (
                <div key={paramKey} className="space-y-1">
                  <Label className="text-xs font-medium text-slate-700">
                    {param.label || paramKey}
                    {param.unit && <span className="text-slate-500 ml-1">({param.unit})</span>}
                  </Label>
                  {renderParameterInput(
                    param, 
                    processData[stepIndex]?.[paramKey], 
                    stepIndex, 
                    paramKey
                  )}
                  {param.description && (
                    <p className="text-xs text-slate-500 mt-1">{param.description}</p>
                  )}
                </div>
              ))}
            </div>
          </motion.div>
        ))}

        <div className="pt-4 space-y-3 border-t border-slate-200">
          <Button
            onClick={onValidate}
            disabled={isValidating}
            className="w-full bg-green-600 hover:bg-green-700 text-white font-medium py-3"
          >
            {isValidating ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2" />
                Validazione in corso...
              </>
            ) : (
              <>
                <CheckCircle className="w-4 h-4 mr-2" />
                Valida Processo
              </>
            )}
          </Button>
          
          <Button
            onClick={onDownload}
            disabled={isDownloading}
            variant="outline"
            className="w-full font-medium py-3"
          >
            {isDownloading ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-slate-600 mr-2" />
                Download...
              </>
            ) : (
              <>
                <Download className="w-4 h-4 mr-2" />
                Download Report
              </>
            )}
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}