import React, { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { ChevronDown, ChevronRight, Settings, Zap } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";

export default function ProcessChain({ processes, expandedProcess, onExpandProcess, onUpdateParameters }) {
  const [selectedRecipes, setSelectedRecipes] = useState({});

  const handleRecipeChange = (processIndex, recipeName) => {
    setSelectedRecipes(prev => ({
      ...prev,
      [processIndex]: recipeName
    }));

    // In a real implementation, you would load recipe parameters here
    // For demo purposes, we'll just update with some sample values
    const sampleRecipeParameters = {
      "Standard": { temperature: { value: 180, unit: "Â°C", type: "number" } },
      "High-temp": { temperature: { value: 250, unit: "Â°C", type: "number" } },
      "Low-pressure": { pressure: { value: 1.0, unit: "bar", type: "number" } }
    };

    if (sampleRecipeParameters[recipeName]) {
      const updatedParams = {
        ...processes[processIndex].parameters,
        ...sampleRecipeParameters[recipeName]
      };
      onUpdateParameters(processIndex, updatedParams);
    }
  };

  const handleParameterChange = (processIndex, paramKey, value) => {
    const updatedParams = {
      ...processes[processIndex].parameters,
      [paramKey]: {
        ...processes[processIndex].parameters[paramKey],
        value: value
      }
    };
    onUpdateParameters(processIndex, updatedParams);
  };

  const renderParameterInput = (param, value, processIndex, paramKey) => {
    const currentValue = value !== undefined ? value : (param.value || "");

    switch (param.type) {
      case "number":
        return (
          <Input
            type="number"
            value={currentValue}
            onChange={(e) => handleParameterChange(processIndex, paramKey, parseFloat(e.target.value) || 0)}
            step="0.01"
            className="text-right font-mono"
          />
        );
      case "select":
        return (
          <Select
            value={String(currentValue)}
            onValueChange={(value) => handleParameterChange(processIndex, paramKey, value)}
          >
            <SelectTrigger>
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              {param.options?.map((option) => (
                <SelectItem key={option} value={String(option)}>
                  {String(option)}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        );
      default:
        return (
          <Input
            value={String(currentValue)}
            onChange={(e) => handleParameterChange(processIndex, paramKey, e.target.value)}
          />
        );
    }
  };

  return (
    <Card className="glass-morphism professional-shadow h-fit">
      <CardHeader className="pb-4">
        <CardTitle className="flex items-center gap-2 text-slate-900">
          <Settings className="w-5 h-5 text-green-600" />
          Manufacturing Process Chain
        </CardTitle>
      </CardHeader>
      <CardContent>
        {processes.length > 0 ? (
          <div className="space-y-4">
            <p className="text-sm text-slate-600 mb-4">
              Expand each process to view and modify its parameters. 
              Select recipes for quick parameter presets.
            </p>

            {processes.map((process, index) => (
              <motion.div
                key={process.id || index}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: index * 0.1 }}
                className="border border-slate-200 rounded-xl overflow-hidden bg-white"
              >
                {/* Process Header */}
                <Button
                  variant="ghost"
                  className={`w-full p-4 h-auto flex items-center justify-between text-left hover:bg-slate-50 ${
                    expandedProcess === index ? 'bg-slate-50' : ''
                  }`}
                  onClick={() => onExpandProcess(expandedProcess === index ? null : index)}
                >
                  <div className="flex items-center gap-3">
                    <div className="w-8 h-8 bg-gradient-to-r from-green-500 to-emerald-500 rounded-lg flex items-center justify-center text-white font-bold">
                      {index + 1}
                    </div>
                    <div>
                      <h3 className="font-semibold text-slate-900">{process.name}</h3>
                      <p className="text-sm text-slate-500">
                        {Object.keys(process.parameters || {}).length} parameters
                      </p>
                    </div>
                  </div>
                  {expandedProcess === index ? (
                    <ChevronDown className="w-5 h-5 text-slate-400" />
                  ) : (
                    <ChevronRight className="w-5 h-5 text-slate-400" />
                  )}
                </Button>

                {/* Process Details */}
                <AnimatePresence>
                  {expandedProcess === index && (
                    <motion.div
                      initial={{ opacity: 0, height: 0 }}
                      animate={{ opacity: 1, height: "auto" }}
                      exit={{ opacity: 0, height: 0 }}
                      transition={{ duration: 0.3 }}
                      className="border-t border-slate-200 bg-slate-50"
                    >
                      <div className="p-4 space-y-6">
                        {/* Recipe Selection */}
                        {process.recipes && process.recipes.length > 0 && (
                          <div>
                            <Label className="text-sm font-medium text-slate-700 mb-2 block">
                              Recipe Preset
                            </Label>
                            <Select
                              value={selectedRecipes[index] || ""}
                              onValueChange={(value) => handleRecipeChange(index, value)}
                            >
                              <SelectTrigger>
                                <SelectValue placeholder="Select a recipe..." />
                              </SelectTrigger>
                              <SelectContent>
                                {process.recipes.map((recipe) => (
                                  <SelectItem key={recipe} value={recipe}>
                                    {recipe}
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                          </div>
                        )}

                        {/* Parameters */}
                        <div>
                          <Label className="text-sm font-medium text-slate-700 mb-3 block">
                            Process Parameters
                          </Label>
                          <div className="space-y-4">
                            {Object.entries(process.parameters || {}).map(([paramKey, param]) => (
                              <div key={paramKey} className="grid grid-cols-2 gap-3 items-center">
                                <Label className="text-sm text-slate-700 capitalize">
                                  {paramKey.replace(/_/g, ' ')}
                                  {param.unit && (
                                    <span className="text-slate-500 ml-1">({param.unit})</span>
                                  )}
                                </Label>
                                {renderParameterInput(param, param.value, index, paramKey)}
                              </div>
                            ))}
                          </div>
                        </div>

                        {selectedRecipes[index] && (
                          <div className="bg-green-50 border border-green-200 rounded-lg p-3">
                            <div className="flex items-center gap-2 text-green-700">
                              <Zap className="w-4 h-4" />
                              <span className="text-sm font-medium">
                                Recipe "{selectedRecipes[index]}" applied
                              </span>
                            </div>
                          </div>
                        )}
                      </div>
                    </motion.div>
                  )}
                </AnimatePresence>
              </motion.div>
            ))}

            <div className="mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
              <p className="text-sm text-blue-700">
                ðŸ’¡ <strong>Tip:</strong> All parameter changes are automatically saved to your browser's local storage. 
                Expand a process and click "Validate" to check parameter validity.
              </p>
            </div>
          </div>
        ) : (
          <div className="text-center py-12">
            <Settings className="w-16 h-16 text-slate-300 mx-auto mb-4" />
            <h3 className="text-lg font-semibold text-slate-700 mb-2">No Process Chain Available</h3>
            <p className="text-slate-500 mb-4">
              Assign properties to colors in the 3D model to generate an optimized process chain.
            </p>
          </div>
        )}
      </CardContent>
    </Card>
  );
}