
import React, { useState, useEffect } from "react";
import { CaseStudy } from "@/entities/CaseStudy";
import { useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { motion, AnimatePresence } from "framer-motion";
import { ArrowLeft, Download, CheckCircle, AlertCircle } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import ProcessPanel from "../components/analisi/ProcessPanel";
import DataVisualization from "../components/analisi/DataVisualization";
import ReferencePanel from "../components/analisi/ReferencePanel";
import NotificationSystem from "../components/analisi/NotificationSystem";

export default function AnalisiPage() {
  const navigate = useNavigate();
  const [caseStudy, setCaseStudy] = useState(null);
  const [selectedAVD, setSelectedAVD] = useState(null);
  const [processData, setProcessData] = useState({});
  const [notifications, setNotifications] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isValidating, setIsValidating] = useState(false);
  const [isDownloading, setIsDownloading] = useState(false);

  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const caseId = urlParams.get('case');
    if (caseId) {
      loadCaseStudy(caseId);
    } else {
      navigate(createPageUrl("Selezione"));
    }
  }, [navigate]);

  const loadCaseStudy = async (caseId) => {
    try {
      const studies = await CaseStudy.list();
      const study = studies.find(s => s.id === caseId);
      if (study) {
        // Parse JSON strings
        const parsedStudy = {
          ...study,
          avd_data: study.avd_data ? JSON.parse(study.avd_data) : [],
          process_steps: study.process_steps ? JSON.parse(study.process_steps) : []
        };
        
        setCaseStudy(parsedStudy);
        if (parsedStudy.avd_data && parsedStudy.avd_data.length > 0) {
          setSelectedAVD(parsedStudy.avd_data[0]);
        }
        
        // Initialize process data
        const initialProcessData = {};
        parsedStudy.process_steps?.forEach((step, index) => {
          initialProcessData[index] = step.parameters || {};
        });
        setProcessData(initialProcessData);
      }
    } catch (error) {
      console.error("Errore nel caricamento del caso:", error);
      addNotification("Errore nel caricamento del caso di studio", "error");
    } finally {
      setIsLoading(false);
    }
  };

  const addNotification = (message, type = "info") => {
    const id = Date.now();
    setNotifications(prev => [...prev, { id, message, type }]);
    setTimeout(() => {
      setNotifications(prev => prev.filter(n => n.id !== id));
    }, 5000);
  };

  const handleValidateProcess = async () => {
    setIsValidating(true);
    try {
      // Simulate validation process
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Check if all required parameters are filled
      const isValid = Object.values(processData).every(stepData => 
        Object.values(stepData).every(value => value !== "" && value !== null && value !== undefined)
      );

      if (isValid) {
        addNotification("Processo validato con successo!", "success");
      } else {
        addNotification("Errore: alcuni valori del processo non sono validi", "error");
      }
    } catch (error) {
      addNotification("Errore durante la validazione del processo", "error");
    } finally {
      setIsValidating(false);
    }
  };

  const handleDownloadReport = async () => {
    setIsDownloading(true);
    addNotification("Download del report in corso...", "info");
    
    try {
      // Simulate report generation
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // Create and download a sample report
      const reportData = {
        case_study: caseStudy.name,
        selected_avd: selectedAVD?.name,
        process_data: processData,
        generated_at: new Date().toISOString()
      };
      
      const blob = new Blob([JSON.stringify(reportData, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `report_${caseStudy.name.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      addNotification("Report scaricato con successo!", "success");
    } catch (error) {
      addNotification("Errore durante il download del report", "error");
    } finally {
      setIsDownloading(false);
    }
  };

  const updateProcessData = (stepIndex, paramKey, value) => {
    setProcessData(prev => ({
      ...prev,
      [stepIndex]: {
        ...prev[stepIndex],
        [paramKey]: value
      }
    }));
  };

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-slate-600">Caricamento caso di studio...</p>
        </div>
      </div>
    );
  }

  if (!caseStudy) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <AlertCircle className="w-16 h-16 text-slate-400 mx-auto mb-4" />
          <h2 className="text-2xl font-bold text-slate-900 mb-2">Caso di Studio Non Trovato</h2>
          <Button onClick={() => navigate(createPageUrl("Selezione"))}>
            Torna alla Selezione
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen">
      <NotificationSystem notifications={notifications} />
      
      {/* Header */}
      <div className="bg-white border-b border-slate-200 px-6 py-4">
        <div className="max-w-7xl mx-auto flex items-center justify-between">
          <div className="flex items-center gap-4">
            <Button
              variant="outline"
              size="icon"
              onClick={() => navigate(createPageUrl("Selezione"))}
              className="rounded-lg"
            >
              <ArrowLeft className="w-4 h-4" />
            </Button>
            <div>
              <h1 className="text-2xl font-bold text-slate-900">{caseStudy.name}</h1>
              <p className="text-slate-600">{caseStudy.description}</p>
            </div>
          </div>
          <div className="flex gap-3">
            <Button
              onClick={handleValidateProcess}
              disabled={isValidating}
              className="bg-green-600 hover:bg-green-700 px-6"
            >
              {isValidating ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2" />
                  Validazione...
                </>
              ) : (
                <>
                  <CheckCircle className="w-4 h-4 mr-2" />
                  Valida Processo
                </>
              )}
            </Button>
            <Button
              onClick={handleDownloadReport}
              disabled={isDownloading}
              variant="outline"
              className="px-6"
            >
              {isDownloading ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-slate-600 mr-2" />
                  Download...
                </>
              ) : (
                <>
                  <Download className="w-4 h-4 mr-2" />
                  Download Report
                </>
              )}
            </Button>
          </div>
        </div>
      </div>

      {/* Main Dashboard */}
      <div className="max-w-7xl mx-auto p-6">
        <div className="grid lg:grid-cols-12 gap-6 h-full">
          {/* Process Panel - Left */}
          <div className="lg:col-span-3">
            <ProcessPanel
              processSteps={caseStudy.process_steps || []}
              processData={processData}
              onUpdateData={updateProcessData}
              onValidate={handleValidateProcess}
              onDownload={handleDownloadReport}
              isValidating={isValidating}
              isDownloading={isDownloading}
            />
          </div>

          {/* Data Visualization - Center */}
          <div className="lg:col-span-6">
            <DataVisualization
              avdData={caseStudy.avd_data || []}
              selectedAVD={selectedAVD}
              onAVDSelect={setSelectedAVD}
            />
          </div>

          {/* Reference Panel - Right */}
          <div className="lg:col-span-3">
            <ReferencePanel
              selectedAVD={selectedAVD}
              caseStudy={caseStudy}
            />
          </div>
        </div>
      </div>
    </div>
  );
}
