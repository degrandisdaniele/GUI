import React, { useState, useEffect } from "react";
import { Prosthesis } from "@/entities/Prosthesis";
import { createPageUrl } from "@/utils";
import { useNavigate } from "react-router-dom";
import { motion } from "framer-motion";
import { Cpu, ArrowRight, Play, Settings } from "lucide-react";

export default function Dashboard() {
  const navigate = useNavigate();
  const [prostheses, setProstheses] = useState([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    loadProstheses();
  }, []);

  const loadProstheses = async () => {
    try {
      const data = await Prosthesis.list();
      setProstheses(data);
    } catch (error) {
      console.error("Errore nel caricamento delle protesi:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleProsthesisSelect = (prosthesis) => {
    navigate(createPageUrl(`Manufacturing?prosthesis=${prosthesis.id}`));
  };

  return (
    <div className="min-h-screen px-6 py-12">
      <div className="max-w-6xl mx-auto">
        {/* Hero Section */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
          className="text-center mb-16"
        >
          <div className="w-20 h-20 bg-gradient-to-r from-blue-600 via-indigo-600 to-purple-600 rounded-2xl mx-auto mb-6 flex items-center justify-center">
            <Cpu className="w-10 h-10 text-white" />
          </div>
          <h1 className="text-4xl md:text-5xl font-bold text-slate-900 mb-6 leading-tight">
            Select Your
            <span className="bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent"> Prosthesis</span>
          </h1>
          <p className="text-xl text-slate-600 max-w-2xl mx-auto leading-relaxed">
            Choose the prosthesis model you want to work with. Each model comes with 
            a default manufacturing process that can be customized to your specifications.
          </p>
        </motion.div>

        {/* Prostheses Grid */}
        {isLoading ? (
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
            {[1, 2, 3, 4, 5, 6].map((i) => (
              <div key={i} className="glass-morphism professional-shadow rounded-2xl p-8 animate-pulse">
                <div className="w-16 h-16 bg-slate-200 rounded-xl mb-6"></div>
                <div className="h-6 bg-slate-200 rounded mb-4"></div>
                <div className="h-20 bg-slate-200 rounded mb-6"></div>
                <div className="h-4 bg-slate-200 rounded"></div>
              </div>
            ))}
          </div>
        ) : (
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
            {prostheses.map((prosthesis, index) => (
              <motion.div
                key={prosthesis.id}
                initial={{ opacity: 0, y: 30 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, delay: index * 0.1 }}
                whileHover={{ y: -8, scale: 1.02 }}
                className="group cursor-pointer"
                onClick={() => handleProsthesisSelect(prosthesis)}
              >
                <div className="glass-morphism professional-shadow rounded-2xl p-8 h-full transition-all duration-300 group-hover:shadow-2xl border border-slate-200/60 group-hover:border-blue-200">
                  <div className="w-16 h-16 rounded-xl mb-6 flex items-center justify-center bg-gradient-to-r from-blue-500 to-indigo-500">
                    <Settings className="w-8 h-8 text-white" />
                  </div>
                  
                  <h3 className="text-2xl font-bold text-slate-900 mb-4 group-hover:text-blue-700 transition-colors">
                    {prosthesis.name}
                  </h3>
                  
                  <div className="mb-6">
                    <p className="text-sm text-slate-500 uppercase tracking-wider font-medium mb-2">Model ID</p>
                    <p className="text-slate-700 font-mono text-lg">{prosthesis.model_id}</p>
                  </div>

                  {prosthesis.model_file_url && (
                    <div className="mb-6">
                      <p className="text-sm text-slate-500">âœ“ 3D Model Available</p>
                    </div>
                  )}
                  
                  <div className="flex items-center text-blue-600 font-semibold group-hover:text-blue-700 transition-colors">
                    <Play className="w-5 h-5 mr-2" />
                    <span>Start Manufacturing</span>
                    <ArrowRight className="w-5 h-5 ml-auto transform group-hover:translate-x-1 transition-transform" />
                  </div>
                </div>
              </motion.div>
            ))}
          </div>
        )}

        {prostheses.length === 0 && !isLoading && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="text-center py-16"
          >
            <div className="w-24 h-24 bg-slate-100 rounded-full mx-auto mb-6 flex items-center justify-center">
              <Settings className="w-12 h-12 text-slate-400" />
            </div>
            <h3 className="text-2xl font-bold text-slate-900 mb-4">No Prostheses Available</h3>
            <p className="text-slate-600 max-w-md mx-auto">
              Prosthesis models will be loaded automatically. 
              Please refresh the page to check availability.
            </p>
          </motion.div>
        )}
      </div>
    </div>
  );
}